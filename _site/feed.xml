<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grant McConnaughey</title>
    <description>My name is Grant McConnaughey. I&apos;m a software developer specializing in Python, Django, Vue.js, and AWS. I lead software teams and mentor others to become leaders themselves.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 07 Feb 2023 19:33:48 -0600</pubDate>
    <lastBuildDate>Tue, 07 Feb 2023 19:33:48 -0600</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>My Top 10 Favorite Albums for Programming</title>
        <description>&lt;p&gt;For me, programming and music go together like peanut butter and, well, music. Or like spaghetti and…music. Basically everything goes well with music.&lt;/p&gt;

&lt;p&gt;I have been on a constant quest to discover the best programming music over my seven-and-a-half years as a professional programmer. During that time I’ve maintained &lt;a href=&quot;https://open.spotify.com/playlist/1mFpgFtuH3LpoR6kHphjQv?si=S6g3zu_1SLK_9n5STVkMnw&quot;&gt;a gigantic Spotify playlist&lt;/a&gt; of albums and songs that I consider the best to work to. It’s aptly titled “Work,” and it contains over 1,000 songs and 54 hours of music.&lt;/p&gt;

&lt;p&gt;Not all albums are of equal quality, however. Below are my top 10 favorite albums to program to—all of which are rated to video games. These are the albums that, throughout the years, I consistently return to time and time again.&lt;/p&gt;

&lt;h2 id=&quot;10---thomas-was-alone---david-housden&quot;&gt;10 - &lt;a href=&quot;https://open.spotify.com/album/0Iw5Z8FWMPL28DC44z2kda?si=f1wmviZoRbecHj3MRgB6Og&quot;&gt;Thomas was Alone - David Housden&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I’ve never played the game Thomas Was Alone, I still stumbled upon its score and would now consider it one of my favorites. At 27 minutes long, &lt;em&gt;Thomas was Alone&lt;/em&gt; is the shortest album on this list.  What I appreciate about this album is that it contains the typical chip tunes sounds you’re used to hearing in video game music, but layers on an orchestrated score for a more melancholy and ultimately hopeful result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Freedom”&lt;/p&gt;

&lt;h2 id=&quot;9---bastion---darren-korb&quot;&gt;9 - &lt;a href=&quot;https://open.spotify.com/album/2r4a3PREYIRF2QdbcPnrEO?si=SFLAD2tQSxCgsTwMx77Clw&quot;&gt;Bastion - Darren Korb&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You won’t hear many chip tunes in &lt;em&gt;Bastion&lt;/em&gt; by Darren Korb. Instead, this album takes a more industrial approach which matches the games steampunk aesthetic. If you’re like me then you’ll probably want to skip over the vocal tracks while working; however, the rest of the album is consistent solid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Spike In a Rail”&lt;/p&gt;

&lt;h2 id=&quot;8---minecraft---volume-alphavolume-beta---c418&quot;&gt;8 - &lt;a href=&quot;https://open.spotify.com/album/3Gt7rOjcZQoHCfnKl5AkK7?si=hI5u29NGTxOHxghPfOIgFA&quot;&gt;Minecraft - Volume Alpha/Volume Beta - C418&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Minecraft&lt;/em&gt; is a moody and atmospheric soundtrack that helps players get lost in the game. Working to the Minecraft soundtrack has a similar effect, where it aids listeners in getting lost in programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Minecraft”&lt;/p&gt;

&lt;h2 id=&quot;7---sword--sworcery-lp---jim-guthrie&quot;&gt;7 - &lt;a href=&quot;https://open.spotify.com/album/5YvKQRX5qlyj0yPCvw6Vyl?si=ugEYXrrRRd-S3oNHrDCqEg&quot;&gt;Sword &amp;amp; Sworcery LP - Jim Guthrie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Sword &amp;amp; Sworcery LP&lt;/em&gt; was my first foray into Jim Guthrie’s music, so it holds a special place in my heart. Guthrie is a sort of indie music legend in that community, and for good reason. &lt;em&gt;Sword &amp;amp; Sworcery LP&lt;/em&gt; is an album that constantly surprises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Under A Tree”&lt;/p&gt;

&lt;h2 id=&quot;6---ori-and-the-blind-forestori-and-the-will-of-the-wisps---gareth-coker&quot;&gt;6 - &lt;a href=&quot;https://open.spotify.com/album/7xPc1OsC2R0siZKMlzRBIo?si=9MRDZTfFSge_7_1hhZxLgg&quot;&gt;Ori and the Blind Forest/Ori and the Will of the Wisps - Gareth Coker&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Ori games both have some of the most beautiful orchestral music I’ve heard. This is not your standard video game soundtrack. Instead, &lt;em&gt;Ori and the Blind Forest&lt;/em&gt; sounds like something out of Avatar or perhaps Lord of the Rings spinoff that focused more on the elves.&lt;/p&gt;

&lt;p&gt;When I first heard the &lt;em&gt;Journey&lt;/em&gt; score several years ago I thought that I’d never hear another video game soundtrack like it, and I’m happy to be wrong.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Light of Nibel”&lt;/p&gt;

&lt;h2 id=&quot;5---fez---disasterpeace&quot;&gt;5 - &lt;a href=&quot;https://open.spotify.com/album/6QtCv5E76lUVbXfUFZxLuH?si=u02QZkqDTyeiTLKnj7D5_Q&quot;&gt;FEZ - Disasterpeace&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Disasterpeace is another video game composer who, seemingly, can do no wrong. My favorite album of his is certainly &lt;em&gt;FEZ&lt;/em&gt;. After listening to &lt;em&gt;FEZ&lt;/em&gt;, don’t forget to give his &lt;em&gt;Hyper Light Drifter&lt;/em&gt; score a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Adventure”&lt;/p&gt;

&lt;h2 id=&quot;4---journey---austin-wintory&quot;&gt;4 - &lt;a href=&quot;https://open.spotify.com/album/0ndOKj9ShVUgDc2UiR8b2M?si=MyoP3296SPuHA38j4n6Yyw&quot;&gt;Journey - Austin Wintory&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Journey&lt;/em&gt; is one of my favorite scores from any medium. I’ve probably listened to it 25 times over the last 8 years, and it never gets old. The album does an excellent job of taking you on the kind of journey that the player takes in the game itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “I Was Born for This”&lt;/p&gt;

&lt;h2 id=&quot;3---hollow-knight---christopher-larkin&quot;&gt;3 - &lt;a href=&quot;https://open.spotify.com/album/4XgGOMRY7H4hl6OQi5wb2Z?si=SHR2kr4JT5Wtzga5kUdeHg&quot;&gt;Hollow Knight - Christopher Larkin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like the biomes in the game Hollow Knight, the &lt;em&gt;Hollow Knight&lt;/em&gt; score is incredibly diverse. Some tracks are more mellow (“Dirtmouth”), some are epic (“Sealed Vessel”), and some are just fun (“Dung Defender”). None are better than “City of Tears,” though, which is named after what your face looks like while listening to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “City of Tears”&lt;/p&gt;

&lt;h2 id=&quot;2---indie-game-the-movie---jim-guthrie&quot;&gt;2 - &lt;a href=&quot;https://open.spotify.com/album/1RbK3hnYdWd9pX5AsESjaf?si=eA2d2IfMSbqayeQf1zoo_w&quot;&gt;Indie Game: The Movie - Jim Guthrie&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jim Guthrie is consistent in all of his albums, but to me &lt;em&gt;Indie Game: The Movie&lt;/em&gt; is the most consistently great of them all. If you’re into this album then be sure to try out literally anything else Jim Guthrie has done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “A Glow You Know”&lt;/p&gt;

&lt;h2 id=&quot;1---celeste---lena-raine&quot;&gt;1 - &lt;a href=&quot;https://open.spotify.com/album/5OZHQ7KG8k04IOkF50fACO?si=qfIYrv39RO6MPzISQZL7hQ&quot;&gt;Celeste - Lena Raine&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Celeste&lt;/em&gt; is my favorite video game soundtrack. Like the game it is at times fast paced and anxious, while at other times it is slower and more melancholy. To me it is one of those few perfect albums from start to finish and I’d recommend it to anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Favorite track:&lt;/strong&gt; “Scattered and Lost”&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2020 03:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/2020/05/12/programming-music/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/05/12/programming-music/</guid>
        
        
        <category>productivity</category>
        
      </item>
    
      <item>
        <title>Postpone now supports bulk importing posts</title>
        <description>&lt;p&gt;Since launch, Postpone’s most requested feature has been the ability to bulk import posts from CSV. I’m happy to announce that &lt;a href=&quot;https://www.postpone.app&quot;&gt;Postpone version &lt;strong&gt;2020.3.0&lt;/strong&gt;&lt;/a&gt;, released today, now supports this feature.&lt;/p&gt;

&lt;p&gt;Here is the &lt;strong&gt;TL;DR&lt;/strong&gt; for the updates in Postpone version 2020.3.0:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added support for bulk importing posts from CSV&lt;/li&gt;
  &lt;li&gt;Display number of characters in post title as users are typing&lt;/li&gt;
  &lt;li&gt;Increased cross-post limit to fro 5 to 10 subreddits&lt;/li&gt;
  &lt;li&gt;Added pagination to Dashboard tables&lt;/li&gt;
  &lt;li&gt;Improved speed of loading posts on the Dashboard&lt;/li&gt;
  &lt;li&gt;Added a link to DM &lt;a href=&quot;https://reddit.com/u/postponedev&quot;&gt;/u/postponedev&lt;/a&gt; on Reddit for help or feature requests&lt;/li&gt;
  &lt;li&gt;Fixed an error that would occur when the user declined to give Reddit app permissions&lt;/li&gt;
  &lt;li&gt;Fixed an error that would occur when the user attempted to link a Reddit account that already had a Postpone account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll briefly dive into a few of the new features.&lt;/p&gt;

&lt;h2 id=&quot;bulk-import-posts&quot;&gt;Bulk Import Posts&lt;/h2&gt;

&lt;p&gt;If you use a service like Postpone, then you likely have a lot of posts you’d like to schedule on Reddit. Often these posts are links to content you’ve created, and you’d like to share them across multiple subreddits at different times. It is now possible to schedule all of these posts at once using Bulk Import.&lt;/p&gt;

&lt;p&gt;Bulk Import gives users the ability to upload a CSV file with many posts and schedule them all for submission. CSV files can be created from a spreadsheet program like Excel or Numbers. Postpone even provides &lt;a href=&quot;https://www.postpone.app/downloads/postpone-import-template.csv&quot;&gt;a handy template&lt;/a&gt; to get you started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/import.png&quot; alt=&quot;Bulk import posts from CSV&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;title-character-count&quot;&gt;Title Character count&lt;/h2&gt;

&lt;p&gt;The objective of Postpone is to help users get the most upvotes, comments, and visibility on their Reddit posts. Post visibility isn’t only determined by the date, time, and subreddit your posts are submitted to. It is also determined by the content of your posts.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://foundationinc.co/lab/reddit-statistics/&quot;&gt;recent study by Foundation&lt;/a&gt; found that Reddit post &lt;strong&gt;titles with 40-120 characters generate the most upvotes&lt;/strong&gt;. To help you hit that target range, Postpone now shows the number of characters on post titles as users type them. Here’s an example of what that looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/title-characters.png&quot; alt=&quot;Title character count&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dashboard-improvements&quot;&gt;Dashboard improvements&lt;/h2&gt;

&lt;p&gt;The new bulk import feature will result in many more posts being submitted to Postpone. So I’ve added a few improvements to the Dashboard to handle this increase.&lt;/p&gt;

&lt;p&gt;First, the Dashboard now supports pagination. If users have dozens of posts scheduled then they’ll be able to page through them 20 at a time. This helps with managing and viewing large amounts of posts.&lt;/p&gt;

&lt;p&gt;I’ve also tweaked some things on the backend to reduce the time it takes to fetch posts and submissions. This results in the Dashboard loading much more quickly, especially for users that have lots of posts and submissions.&lt;/p&gt;

&lt;h2 id=&quot;make-a-feature-request&quot;&gt;Make a Feature Request&lt;/h2&gt;

&lt;p&gt;That’s it for today’s update. If you’d like to submit feedback or request a feature then send an email to &lt;a href=&quot;mailto:PostponeReddit@gmail.com&quot;&gt;PostponeReddit@gmail.com&lt;/a&gt; or message me &lt;a href=&quot;https://twitter.com/gmcconnaughey&quot;&gt;on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 03:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/2020/04/19/postpone-now-supports-bulk-imports/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/04/19/postpone-now-supports-bulk-imports/</guid>
        
        
        <category>projects</category>
        
        <category>postpone</category>
        
      </item>
    
      <item>
        <title>Postpone&apos;s First Major Update</title>
        <description>&lt;p&gt;It’s been a busy two weeks since &lt;a href=&quot;http://www.grantmcconnaughey.com/blog/2020/03/16/announcing-postpone/&quot;&gt;I first announced&lt;/a&gt; the launch of my new project &lt;a href=&quot;https://www.postpone.app&quot;&gt;Postpone&lt;/a&gt;, an app for scheduling Reddit posts for increased views, upvotes, and traffic. I’m happy to announce that today I’m releasing a feature-packed update to Postpone: &lt;strong&gt;version 2020.2.0&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Here’s the &lt;strong&gt;TL;DR&lt;/strong&gt; for those into the whole brevity thing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Added &lt;a href=&quot;https://www.postpone.app/analysis&quot;&gt;Subreddit Analysis&lt;/a&gt; page&lt;/li&gt;
  &lt;li&gt;Added support for cross-posting submissions to multiple subreddits&lt;/li&gt;
  &lt;li&gt;Added the ability to submit comments with link posts&lt;/li&gt;
  &lt;li&gt;Added upvote and comment counts to Post submissions&lt;/li&gt;
  &lt;li&gt;Added Reddit statistics to the New Post page&lt;/li&gt;
  &lt;li&gt;Added Postpone version to site footer&lt;/li&gt;
  &lt;li&gt;Added the ability to edit flair on queued submissions&lt;/li&gt;
  &lt;li&gt;Fixed links to Features and Pricing from any page&lt;/li&gt;
  &lt;li&gt;Fixed an issue submitting link posts&lt;/li&gt;
  &lt;li&gt;Fixed an issue navigating to submitted link posts on Reddit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subreddit-analysis&quot;&gt;&lt;a href=&quot;https://www.postpone.app/analysis&quot;&gt;Subreddit Analysis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When scheduling Reddit posts, it’s not enough to know &lt;em&gt;where&lt;/em&gt; to post them, you also need to know &lt;em&gt;when&lt;/em&gt; to post them. That’s where the Subreddit Analysis page comes in.&lt;/p&gt;

&lt;p&gt;Subreddit Analysis helps users find the best time for them to queue up their posts depending on the subreddit. It does this by looking at hundreds of top posts over the last year and seeing what time those posts were submitted.&lt;/p&gt;

&lt;p&gt;The best part about Subreddit Analysis: its free for everyone, even those without a Postpone account! Simply &lt;a href=&quot;https://www.postpone.app/analysis&quot;&gt;navigate here&lt;/a&gt; to give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/subreddit-analysis.png&quot; alt=&quot;Subreddit Analysis page&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cross-post-support&quot;&gt;Cross-post support&lt;/h2&gt;
&lt;p&gt;Postpone now supports cross-posting a single post to multiple subreddits at different times. This is useful when you have a post or link you’d like to share, but you want to share it to multiple places to increase the likelihood that it is seen.&lt;/p&gt;

&lt;p&gt;To cross-post, click the “Cross-post to Another Subreddit” button. Postpone allows cross-posting to 4 additional subreddits. Cross-post support is available for paid Postpone plans.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/cross-posting.png&quot; alt=&quot;Cross-post support&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;submit-comments-with-link-posts&quot;&gt;Submit comments with link posts&lt;/h2&gt;
&lt;p&gt;Link posts are the most popular type of content on Reddit, however the title alone does not provide a lot of context. This is where comments come in.&lt;/p&gt;

&lt;p&gt;Postpone now gives users the ability to include a comment with their posts. Postpone will deliver your comments as soon as your post is submitted to Reddit. Commenting on link posts is available on all plans.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/link-post-comments.png&quot; alt=&quot;Link post comments&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reddit-statistics&quot;&gt;Reddit statistics&lt;/h2&gt;
&lt;p&gt;Did you know that the top Reddit posts have titles with fewer than 120 characters? Did you know that 38% of Reddit users consider themselves technology lovers? Now you do!&lt;/p&gt;

&lt;p&gt;Postpone now displays Reddit statistics when submitting a post. These will help users make decisions on what to post, such as including shorter titles or submitting links more often than posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/reddit-stats-1.png&quot; alt=&quot;Reddit statistics&quot; /&gt;
&lt;img src=&quot;/images/projects/postpone/reddit-stats-2.png&quot; alt=&quot;Reddit statistics&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;and-also&quot;&gt;And also…&lt;/h2&gt;
&lt;p&gt;Postpone will now track the total number of upvotes and comments that your submissions receive after you post them. After queueing up some posts, come back to Postpone over the next few days to see how your submissions are doing.&lt;/p&gt;

&lt;p&gt;Some bugs were also squashed! These bugs are as good as gone:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fixed links to Features and Pricing from any page&lt;/li&gt;
  &lt;li&gt;Fixed an issue submitting link posts&lt;/li&gt;
  &lt;li&gt;Fixed an issue navigating to submitted link posts on Reddit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stay-tuned&quot;&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;That is it for now. Stay tuned for additional updates in the coming weeks and months!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2020 03:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/2020/03/30/postpones-first-major-update/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/03/30/postpones-first-major-update/</guid>
        
        
        <category>projects</category>
        
        <category>postpone</category>
        
      </item>
    
      <item>
        <title>Announcing Postpone</title>
        <description>&lt;p&gt;Today I’m happy to announce the release of &lt;a href=&quot;https://www.postpone.app&quot;&gt;Postpone&lt;/a&gt;, an app to schedule Reddit posts for increased views, upvotes, and traffic to your projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/home.png&quot; alt=&quot;Postpone home page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Postpone is an app created to solve my own need. I often have blog posts, open source project updates, or other content to share on Reddit. However, I don’t want to share this content when others are offline and won’t see it. This is where Postpone comes in.&lt;/p&gt;

&lt;p&gt;Postpone lets users queue up Reddit posts so that they’re submitted when others are online to see them.&lt;/p&gt;

&lt;h2 id=&quot;prediction-queueing-and-analytics&quot;&gt;Prediction, Queueing, and Analytics&lt;/h2&gt;

&lt;p&gt;Postpone helps users get their content noticed by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Predicting&lt;/strong&gt; the best time to post and which subreddits to post to.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Queueing&lt;/strong&gt; your posts so that they are submitted to these subreddits at these times.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Analytics&lt;/strong&gt; to see how your posts are performing over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The launch version of Postpone focuses on Queueing first. Development on Postpone will continue to improve Prediction and Analytics of posts as well.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;Postpone comes with some neat features at launch to help you queue up your Reddit posts.&lt;/p&gt;

&lt;h3 id=&quot;plans&quot;&gt;Plans&lt;/h3&gt;

&lt;p&gt;Postpone supports 3 plans: Base, Premium, and Unlimited.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Base&lt;/strong&gt; lets you queue up one post per week from a single Reddit account. &lt;strong&gt;Premium&lt;/strong&gt; lets you queue up unlimited posts from a single Reddit account. &lt;strong&gt;Unlimited&lt;/strong&gt; lets you queue up unlimited posts from unlimited Reddit accounts.&lt;/p&gt;

&lt;p&gt;As new features are built, some will only be available to paid plans (Premium and Unlimited).&lt;/p&gt;

&lt;h3 id=&quot;writing-posts&quot;&gt;Writing Posts&lt;/h3&gt;

&lt;p&gt;Postpone has two different ways to write posts.&lt;/p&gt;

&lt;p&gt;By default, Postpone provides a fancy WYSIWYG editor for writing posts. This is built using &lt;a href=&quot;https://tiptap.scrumpy.io/&quot;&gt;Tiptap&lt;/a&gt;, which is a great WYSIWYG library for Vue.js. I’ve meticulously tweaked and configured Tiptap, and I think the end result is pretty great.&lt;/p&gt;

&lt;p&gt;Not everyone wants to use a WYSIWYG editor, however. Some folks prefer to write in raw &lt;a href=&quot;https://www.reddit.com/wiki/markdown&quot;&gt;Markdown&lt;/a&gt;. If you’d prefer to write posts in Markdown then you can use the Markdown-only editor instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/update-reddit-post.png&quot; alt=&quot;Update a post page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;subreddit-search&quot;&gt;Subreddit Search&lt;/h3&gt;

&lt;p&gt;Postpone provides a subreddit search input to help you pick the subreddit to post in. This gives you the ability to search for a subreddit, as well as related subreddits. Postpone will even show you the total number of subscribers to these subreddits, in order to help you pick subreddits with the largest audience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/projects/postpone/subreddit-search.png&quot; alt=&quot;Subreddit search&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;retry-support&quot;&gt;Retry Support&lt;/h3&gt;

&lt;p&gt;Sometimes posts fail to submit. This could happen for several reasons, such as Reddit being temporary unavailable or user login credentials being out of date.&lt;/p&gt;

&lt;p&gt;When errors occur, Postpone will send you an e-mail letting you know that it could not submit your post. The next time you visit Postpone the app will display a list of failed posts, the reason why they failed, and let you retry them.&lt;/p&gt;

&lt;h2 id=&quot;just-the-start&quot;&gt;Just the Start&lt;/h2&gt;

&lt;p&gt;This initial version of &lt;a href=&quot;https://www.postpone.app&quot;&gt;Postpone&lt;/a&gt; is just a start. Over the coming weeks and months I’ll be adding features such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ability to see the best time to post to certain subreddits.&lt;/li&gt;
  &lt;li&gt;Support for cross-posting to multiple subreddits at once.&lt;/li&gt;
  &lt;li&gt;Simple analytics, such as total post upvotes and comments.&lt;/li&gt;
  &lt;li&gt;Improved analytics, such as post performance over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To suggest a feature or report a bug please either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tweet &lt;a href=&quot;https://twitter.com/gmcconnaughey&quot;&gt;@grantmcconnaughey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Post in &lt;a href=&quot;https://reddit.com/r/postpone&quot;&gt;/r/postpone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;E-mail &lt;a href=&quot;mailto:PostponeReddit@gmail.com&quot;&gt;PostponeReddit@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy Postponing!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2020 03:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/2020/03/16/announcing-postpone/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/03/16/announcing-postpone/</guid>
        
        
        <category>projects</category>
        
        <category>postpone</category>
        
      </item>
    
      <item>
        <title>My Manager README</title>
        <description>&lt;p&gt;The following is my Manager README. It outlines how I approach managing, what my values and expectations are, and how I best work with others. The canonical source for my Manager README can be found &lt;a href=&quot;https://managerreadme.com/readme/grantmcconnaughey&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivation-for-this-document&quot;&gt;Motivation for this document&lt;/h2&gt;

&lt;p&gt;Hey everyone! This is is my manager README. It describes a little bit about me and how I approach being a manager. By the end of this document you should have a good idea of my values, expectations, quirks, and how we can best work together.&lt;/p&gt;

&lt;h2 id=&quot;my-role&quot;&gt;My role&lt;/h2&gt;

&lt;p&gt;My role is to help teams succeed in building quality software in an efficient manner. I do that through several avenues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Developing high-level organizational objectives and strategies.&lt;/li&gt;
  &lt;li&gt;Collaborating with Product Managers to refine features that teams will build.&lt;/li&gt;
  &lt;li&gt;Mentoring and leading Engineers at all levels.&lt;/li&gt;
  &lt;li&gt;Ensuring that Engineers understand product vision and their role on the team.&lt;/li&gt;
  &lt;li&gt;Working with Engineering Managers on recruitment and retention.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-do-i-value-most&quot;&gt;What do I value most?&lt;/h2&gt;

&lt;p&gt;I value &lt;strong&gt;pragmatism&lt;/strong&gt; over idealism. Let’s discuss what the ideal world would look like, but let’s also be pragmatic and build toward that, knowing that discussion doesn’t move us forward.&lt;/p&gt;

&lt;p&gt;I value &lt;strong&gt;action&lt;/strong&gt; over continuous discussion. We should discuss issues before taking action, but we should also work together to ensure that we don’t have the same discussions over and over. Once we’ve identified a problem, let’s decide on what to do next and do it.&lt;/p&gt;

&lt;p&gt;I value &lt;strong&gt;continuous learning&lt;/strong&gt; and improvement. We all have areas where we could improve, myself included! I value those who acknowledge their shortcomings and actively work to making improvements in those areas, whether it’s taking a course, self-reflection, reading blog posts, or reading books.&lt;/p&gt;

&lt;p&gt;I value &lt;strong&gt;candor&lt;/strong&gt; over euphemism. Let’s be open and honest with each other, and avoid buzz-words and insincerity.&lt;/p&gt;

&lt;p&gt;I value &lt;strong&gt;shipping&lt;/strong&gt; over demos. Our software doesn’t deliver value to anyone until its in the hands of our users.&lt;/p&gt;

&lt;h2 id=&quot;my-expectations&quot;&gt;My expectations&lt;/h2&gt;

&lt;p&gt;I expect you to not maintain the status quo. We can build great things together, but that’s only if we both agree to go above and beyond what everyone else is doing.&lt;/p&gt;

&lt;p&gt;I expect you to communicate clearly. If you’re having trouble gathering your thoughts on a topic, then I might ask you to write it down in a document first.&lt;/p&gt;

&lt;p&gt;I expect for you to meet the commitments that you’ve established, and if you can’t meet those commitments to communicate them clearly to me so that I’m in the loop.&lt;/p&gt;

&lt;p&gt;If you’d like to get together for a meeting, then I expect information on what the meeting is about before we meet. If its a quick topic, then this might be a Slack post. If its a more in-depth topic, then I expect a document.&lt;/p&gt;

&lt;h2 id=&quot;11s&quot;&gt;1:1s&lt;/h2&gt;

&lt;p&gt;We will have 1:1s either weekly or bi-weekly – it’s your call! These meetings are for you. You won’t be asked to fill out a pre-defined template of questions, although I might have a document that I jot notes down in as we discuss.&lt;/p&gt;

&lt;p&gt;We’ll discuss whatever you’d like, although I may ask questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you have any concerns or blockers I should know about?&lt;/li&gt;
  &lt;li&gt;How are the individuals on your team doing?&lt;/li&gt;
  &lt;li&gt;What one thing can I help you with that would have the biggest impact?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our 1:1s I’ll write down any Action Items for either you or me to perform. Let’s not just discuss making the world a better place; let’s make it happen.&lt;/p&gt;

&lt;h2 id=&quot;personality-quirks&quot;&gt;Personality quirks&lt;/h2&gt;

&lt;p&gt;I can be pretty animated in calls. This is usually caused by two things: I’m passionate about what we’re building, and I’ve just downed my third cup of coffee from &lt;a href=&quot;https://www.youtube.com/watch?v=vaNpcgmj5qI&quot;&gt;my mug&lt;/a&gt;. If my style is ever too much, feel free to ask me to tone it down a bit. 🙂&lt;/p&gt;

&lt;p&gt;I also like to joke! Life is too short to not enjoy it, so I try to enjoy everything, even the “serious” stuff like work. If I say something on Slack and you think I might be joking then I probably am. If you’re not sure then you’re always free to ask! When giving directions, I will state these directions clearly and without humor, so that there is no room for misinterpreting.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Mar 2020 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2020/03/03/manager-readme/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/03/03/manager-readme/</guid>
        
        
        <category>management</category>
        
      </item>
    
      <item>
        <title>Automate Python code reviews for free with GitHub Actions, Flake8, and Lintly</title>
        <description>&lt;p&gt;Code is read much more often than it is written. As software developers, we have many options for ensuring our code is as readable as possible. In this post I’ll describe how you can use several free open source tools to automate code reviews in your GitHub repositories.&lt;/p&gt;

&lt;h2 id=&quot;the-tools&quot;&gt;The Tools&lt;/h2&gt;

&lt;p&gt;We’re going to use the following tools to automate code quality checking in pull requests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flake8.pycqa.org/en/latest/&quot;&gt;Flake8&lt;/a&gt;, a popular Python linter that combines three separate linters: pycodestyle (styling), pyflakes (syntax, semantics), and mccabe (code complexity).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/grantmcconnaughey/lintly&quot;&gt;Lintly&lt;/a&gt;, a CLI tool which parses linter output, determines which lines have violations, and creates a pull request review with comments on each line.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;, GitHub’s new CI service, which is free for up to &lt;a href=&quot;https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions&quot;&gt;2,000 minutes of execution per month&lt;/a&gt; for GitHub users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lintly-flake8-github-action&quot;&gt;Lintly-Flake8 GitHub Action&lt;/h2&gt;

&lt;p&gt;To make this whole process easy, I’ve created a GitHub Action to merge Flake8 with Lintly. Its called &lt;a href=&quot;https://github.com/marketplace/actions/lintly-flake8&quot;&gt;Lintly-Flake8&lt;/a&gt;, and its available on the GitHub Marketplace.&lt;/p&gt;

&lt;p&gt;To use Lintly-Flake8, add the following to a GitHub Actions file at the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/lint.yml&lt;/code&gt; in your repo:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grantmcconnaughey/lintly-flake8-github-action@v1.0&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells GitHub Actions to only run on pull requests. We first check out the code in the pull request, then use Lintly-Flake8 by passing the GitHub Actions bot token. This ensures that the bot github-actions will be used for the review.&lt;/p&gt;

&lt;p&gt;Next, open a pull request with flake8 issues, such as too many blank lines between functions or the cryptic “&lt;a href=&quot;https://www.flake8rules.com/rules/E127.html&quot;&gt;Continuation line over-indented for visual indent&lt;/a&gt;.” GitHub Actions will run and detect all of the changed lines with violations. Then the github-actions bot will leave a code review on each line, making it very clear what needs to be updated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lintly-github-actions.png&quot; alt=&quot;Lintly leaving a PR review&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;options&quot;&gt;Options&lt;/h2&gt;

&lt;p&gt;Lintly-Flake8 supports a few different options to tweak how it runs.&lt;/p&gt;

&lt;p&gt;First, it supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failIf&lt;/code&gt;, which allows you to change if Lintly should catch &lt;em&gt;any&lt;/em&gt; violation or only &lt;em&gt;new&lt;/em&gt; ones. Valid values are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; is the default, which is handy for projects with existing flake8 violations.&lt;/p&gt;

&lt;p&gt;Lintly-Flake8 also supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt;, which are additional arguments sent to the flake8 CLI. This gives you the ability to pass arguments like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--select&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ignore&lt;/code&gt;, as well as changing the directory to be listing. This defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;, which lints all files in the current directory.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Below is an example of all arguments supported in a Lintly-Flake8 step in a Github Action:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grantmcconnaughey/lintly-flake8-github-action@v1.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;failIf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;any&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--ignore=E121,E123&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Flake8 lints code. Lintly creates GitHub pull request reviews. GitHub Actions automates and orchestrates all of this. The power of open source allows these distinct tools to work together to provide overall value.&lt;/p&gt;

&lt;p&gt;If you’d like to contribute to Lintly, Flake8, or Flake8Rules then check out the following GitHub repos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/grantmcconnaughey/lintly&quot;&gt;Lintly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PyCQA/flake8&quot;&gt;Flake8&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://github.com/grantmcconnaughey/flake8rules&quot;&gt;Flake8Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 25 Feb 2020 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2020/02/25/automate-python-code-quality/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/02/25/automate-python-code-quality/</guid>
        
        
        <category>python</category>
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>My 2020 OKRs</title>
        <description>&lt;p&gt;I learned about &lt;a href=&quot;https://medium.com/startup-tools/okrs-5afdc298bc28&quot;&gt;OKRs&lt;/a&gt; in 2019, and since then have come to appreciate them. They’re simple: come up with one high-level &lt;strong&gt;Objective&lt;/strong&gt; you’d like to accomplish, then come up with separate, measurable &lt;strong&gt;Key Results&lt;/strong&gt; that indicate whether you’ve hit your objective or not.&lt;/p&gt;

&lt;p&gt;This year I switched from standard New Years’ goals to OKRs. This adds more visibility into whether I’m on track to reach my goals or not. To track my progress on these OKRs I use &lt;a href=&quot;https://www.stridesapp.com&quot;&gt;Strides&lt;/a&gt;, an app for iOS.&lt;/p&gt;

&lt;p&gt;Below are my three Objectives for 2020, along with their corresponding Key Results. All Key Result end dates are December 31st, 2020.&lt;/p&gt;

&lt;h2 id=&quot;objective-build-more-side-projects&quot;&gt;Objective: Build more side projects&lt;/h2&gt;
&lt;p&gt;I will build out a portfolio of side projects to stay sharp in my software development skills.&lt;/p&gt;

&lt;h3 id=&quot;key-results&quot;&gt;Key Results&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Release three new open-source projects.&lt;/li&gt;
  &lt;li&gt;Release one deployed web project.&lt;/li&gt;
  &lt;li&gt;Release one mobile app (iOS or Watch) on the App Store.&lt;/li&gt;
  &lt;li&gt;Release one integration (Slack bot, browser extension).&lt;/li&gt;
  &lt;li&gt;Make $1 on any project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;objective-be-a-more-healthy-person&quot;&gt;Objective: Be a more healthy person&lt;/h2&gt;
&lt;p&gt;I will be a more healthy person physically and mentally.&lt;/p&gt;

&lt;h3 id=&quot;key-results-1&quot;&gt;Key Results&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Exercise (walk/run/bike) 3 times per week.&lt;/li&gt;
  &lt;li&gt;Meditate 5 minutes a day 4 days per week.&lt;/li&gt;
  &lt;li&gt;Lose 5 lbs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;objective-be-more-engaged-with-the-community&quot;&gt;Objective: Be more engaged with the community&lt;/h2&gt;
&lt;p&gt;I will be more engaged with the software development community to grow a following and establish myself as a figure in the software development field.&lt;/p&gt;

&lt;h3 id=&quot;key-results-2&quot;&gt;Key Results&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Write one blog post per month.&lt;/li&gt;
  &lt;li&gt;Give one talk at a local meetup.&lt;/li&gt;
  &lt;li&gt;Increase Twitter follower count to 500.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 14 Jan 2020 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2020/01/14/2020-okrs/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/14/2020-okrs/</guid>
        
        
        <category>okrs</category>
        
      </item>
    
      <item>
        <title>Favorite Films of 2019</title>
        <description>&lt;p&gt;For the last several years I’ve kept track of every film I’ve seen and ranked them. This year was no different.&lt;/p&gt;

&lt;p&gt;I saw 18 films that were released in 2019. Below are some thoughts on a few of my favorites – Marriage Story, Knives Out, and Little Women – as well as a fully ranked list.&lt;/p&gt;

&lt;h2 id=&quot;marriage-story&quot;&gt;Marriage Story&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Marriage Story&lt;/strong&gt; is an ironically titled film about a couple navigating the full process of a divorce; from the awkward but cordial beginning to the eventual toxicity that comes with involving cutthroat lawyers. It is one of those films that has the ability to make you laugh during one scene and cry with the next.&lt;/p&gt;

&lt;p&gt;There are several incredibly affecting scenes in this film. Perhaps the most memorable is a climactic scene where Adam Driver sits with his theater friends at a restaurant and realizes that he’s become the worst thing a theater director can be: boring. When the pianist begins to play “Being Alive” by Stephen Sondheim, Driver stands up and naturally begins singing a song that serves two purposes: entertainment and catharsis.&lt;/p&gt;

&lt;p&gt;No movie I saw this year affected me as much as Marriage Story. I’m sure its a film that I’ll revisit multiple times in the future.&lt;/p&gt;

&lt;h2 id=&quot;knives-out&quot;&gt;Knives Out&lt;/h2&gt;

&lt;p&gt;Watching &lt;strong&gt;Knives Out&lt;/strong&gt; in theaters resulted in one of my favorite movie-going experiences of the year, second only to Avengers: Endgame.&lt;/p&gt;

&lt;p&gt;Knives Out is a murder mystery, but like all Rian Johnson movies, it ultimately subverts your expectations about where a film in the genre should go. It’s a murder mystery that “solves itself” in the first act. It’s a detective film where you simultaneously want the detective to solve the murder and don’t want them to solve the murder. To say any more would be to spoil what is a roller coaster of a movie. Just go see this one.&lt;/p&gt;

&lt;h2 id=&quot;little-women&quot;&gt;Little Women&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Little Women&lt;/strong&gt; really surprised me. I had no prior knowledge of the novel or any of the several film adaptations. I have almost nothing in common with a group of sisters living in the late 1800s. Despite this, Little Women ended up being equally as affecting as Marriage Story. This is thanks to Greta Gerwig’s clever non-linear screenplay and direction.&lt;/p&gt;

&lt;p&gt;Saoirse Ronan is excellent, as always, as the confident and non-traditional Jo. Florence Pugh is also a standout as the stubborn and romantic Amy.&lt;/p&gt;

&lt;h2 id=&quot;the-full-ranked-list&quot;&gt;The full ranked list&lt;/h2&gt;

&lt;p&gt;Below is a full ranked list of every movie I saw which came out in 2019:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Marriage Story&lt;/li&gt;
  &lt;li&gt;Knives Out&lt;/li&gt;
  &lt;li&gt;Little Women&lt;/li&gt;
  &lt;li&gt;1917&lt;/li&gt;
  &lt;li&gt;The Irishman&lt;/li&gt;
  &lt;li&gt;Avengers: Endgame&lt;/li&gt;
  &lt;li&gt;Booksmart&lt;/li&gt;
  &lt;li&gt;El Camino&lt;/li&gt;
  &lt;li&gt;Us&lt;/li&gt;
  &lt;li&gt;The Farewell&lt;/li&gt;
  &lt;li&gt;Toy Story 4&lt;/li&gt;
  &lt;li&gt;Star Wars: The Rise of Skywalker&lt;/li&gt;
  &lt;li&gt;Once Upon a Time… In Hollywood&lt;/li&gt;
  &lt;li&gt;Long Shot&lt;/li&gt;
  &lt;li&gt;The Report&lt;/li&gt;
  &lt;li&gt;Frozen 2&lt;/li&gt;
  &lt;li&gt;Late Night&lt;/li&gt;
  &lt;li&gt;Yesterday&lt;/li&gt;
  &lt;li&gt;Captain Marvel&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 03 Jan 2020 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2020/01/03/favorite-films-of-2019/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2020/01/03/favorite-films-of-2019/</guid>
        
        
        <category>film</category>
        
      </item>
    
      <item>
        <title>Launching Lintly: One Month In</title>
        <description>&lt;p&gt;It has been about a month since I launched my app Lintly, an automated code linting website for Python, JavaScript, and CSS. I’ve learned a lot in the last 6 months while working on and deploying Lintly. In this article I’m going to recap Lintly’s first month and discuss all that goes into building a production app.&lt;/p&gt;

&lt;p&gt;Specifically, I’ll talk about…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My strategy for planning the app&lt;/li&gt;
  &lt;li&gt;Project management I used during development&lt;/li&gt;
  &lt;li&gt;The AWS services I used for deployment&lt;/li&gt;
  &lt;li&gt;How I marketed the app without spending a dime&lt;/li&gt;
  &lt;li&gt;The app’s finances (a breakdown of every dollar I’ve spent on Lintly)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/lintly-dashboard.png&quot; alt=&quot;The Lintly Dashboard&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-numbers&quot;&gt;The numbers&lt;/h2&gt;

&lt;p&gt;Let’s get some stats out of the way. Here is how Lintly has performed in the last month:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;78 users&lt;/strong&gt; have signed up&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;131 GitHub repos&lt;/strong&gt; are being linted&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;642 times&lt;/strong&gt; Lintly has linted code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;320,146 lines of code&lt;/strong&gt; linted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not bad! I told my wife that if 10 people signed up in the first week that I would be happy. So 75 users in a month is certainly something I’m happy with.&lt;/p&gt;

&lt;p&gt;Now let’s talk about building and deploying the app. First up: Planning.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;/h2&gt;

&lt;p&gt;Planning was where I spent the least amount of time. There can be philosophical arguments about how much planning one should perform on a side project, but those are best left to smarter developers.&lt;/p&gt;

&lt;p&gt;I do like to do one bit of planning: checking out competitors. I knew there was already a similar app in the Python landscape (wink, nudge), and several other competitors that work with all sorts of languages. So I went to the home page for all of those sites and read about their features. I also checked out the documentation for those apps.&lt;/p&gt;

&lt;p&gt;I do all of this to give me a good sense of what features are universal between all code linting sites. For example, all sites integrate with GitHub webhooks, so I knew that would be important. On the flip side, some sites simply lint pull requests and don’t store the results, so perhaps that isn’t a required feature.&lt;/p&gt;

&lt;p&gt;I wrote down all the required and non-essential features. All the required features went into the Beta feature set. Everything non-essential went into the Someday or v1.0 feature set.&lt;/p&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;p&gt;After planning it was time to start hacking on this thing. I’m pretty familiar with Python and Django, so those are what I used to build Lintly. I worked on Lintly in my spare time for about 6 months before finally releasing it. Occasionally I wouldn’t work on Lintly for weeks at a time. However, setting a goal to release the first week of January helped me to finally focus and ship a working product.
I used Trello to help keep track of features that needed to be completed. I split the Trello board into 5 lanes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To-Do - Someday&lt;/li&gt;
  &lt;li&gt;To-Do- v1.0&lt;/li&gt;
  &lt;li&gt;To-Do - Beta&lt;/li&gt;
  &lt;li&gt;Doing&lt;/li&gt;
  &lt;li&gt;Done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The To-Do - Someday lane consists of features that would be nice to have, but are not required at all. To-Do - v1.0 is for features that need to be in version 1.0 (like accepting payments for private repos), but don’t need to be in the beta. The To-Do - Beta lane is for features required to even release a beta.&lt;/p&gt;

&lt;p&gt;By using these 5 lanes I was able to focus exclusively on the features required to release a functional beta. This is easier than it sounds, as I often found myself moving new features into the beta lane. But overall this system worked well for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/trello-board.png&quot; alt=&quot;The Lintly Dashboard&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;When I finally completed all cards in the To-Do - Beta lane in Trello I was ready for deployment. I decided to go with AWS since we use a lot of AWS services where I work, and because knowing AWS is an important skill set to have these days. AWS also provides a &lt;a href=&quot;https://aws.amazon.com/free/&quot;&gt;free tier&lt;/a&gt;, which allowed me to play around with the different services and initially deploy the app without having to pay a dime.
AWS is overwhelming to those unfamiliar with it. AWS has dozens of services at the developers disposal. In the end,&lt;/p&gt;

&lt;p&gt;I used these services to deploy Lintly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Elastic Beanstalk&lt;/strong&gt; - A Heroku-esque web server environment&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RDS&lt;/strong&gt; - Hosts the Postgres database&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ECS&lt;/strong&gt; - Runs a cluster of Docker containers (I use these for the Lintly Celery workers)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ElasticCache&lt;/strong&gt; - Hosts the Redis cache&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SQS&lt;/strong&gt; - A message queueing system that integrates with Celery&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Route 53&lt;/strong&gt; - DNS management&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;S3&lt;/strong&gt; - Stores Lintly’s static assets&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CloudFront&lt;/strong&gt; - A CDN in front of Lintly’s static assets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just the tip of the iceberg of what AWS has to offer. However, I believe these services are some of the most essential ones to learn. If you understand them then you should be able to deploy most standard web apps to the world.&lt;/p&gt;

&lt;p&gt;Side note: If you want to deploy a Django app to AWS and need a place to start, &lt;a href=&quot;https://realpython.com/blog/python/deploying-a-django-app-and-postgresql-to-aws-elastic-beanstalk/&quot;&gt;this article&lt;/a&gt; is excellent.&lt;/p&gt;

&lt;h2 id=&quot;marketing&quot;&gt;Marketing&lt;/h2&gt;

&lt;p&gt;In order to market you have to provide value in one form or another. The easiest way to provide value is to pay money for a site to place an ad or promote a Tweet that others will see. Most solo developers don’t want to spend a lot of money marketing an app, especially one they would consider a side project. I’m certainly no exception to that, which meant I needed to find alternative ways to let people know about Lintly.&lt;/p&gt;

&lt;p&gt;I decided to write articles about Lintly and post them on Medium, Twitter, and Reddit. These articles (much like this one) aim to teach the reader about something. One of the articles I wrote was called “Mistakes I Made Writing a Django App (and How I Fixed Them)”, which talked about Lintly and some of the ways I messed up while working on it. This article provides value to the reader by giving them real world examples of a Django app. It also informs them about Lintly. Everyone wins!&lt;/p&gt;

&lt;h2 id=&quot;finances&quot;&gt;Finances&lt;/h2&gt;

&lt;p&gt;Lintly has no way of accepting money yet. Eventually I will charge for private repos, but to start out I wanted to offer it for free to have people try it out and report bugs. I can, however, talk about how much Lintly costs.
So far Lintly hasn’t cost that much. Here’s a breakdown of what I’ve spent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$9 - lintly.com domain name&lt;/li&gt;
  &lt;li&gt;$18 - Bootstrap theme&lt;/li&gt;
  &lt;li&gt;$4.69 - AWS costs for December 2016&lt;/li&gt;
  &lt;li&gt;$56.39 - AWS costs for January 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;January 2017 was by far the most expensive month I’ve had. This is mostly because in mid-January I tried changing how the app was deployed in a number of different ways. I tried using a single container Docker instance, a multi-container Docker instance, regular Elastic Beanstalk, Zappa, and ECS. All of that stopping and starting various EC2 instances added up, and the bill came to be $56.39.&lt;/p&gt;

&lt;p&gt;Since then I have found a deployment that I really like - Elastic Beanstalk for the web server and ECS for the Celery worker containers. These both run on t2.micro EC2 instances (there just isn’t very much traffic right now) so the costs are pretty minimal.&lt;/p&gt;

&lt;h2 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h2&gt;

&lt;p&gt;Lintly had an exciting and fun first month. I don’t know if it will ever be considered a success from a monetary standpoint, but I don’t think it matters. To me it’s a success either way.&lt;/p&gt;

&lt;p&gt;I would work on it even if it never made a dollar.&lt;/p&gt;

&lt;p&gt;I build it because it’s fun.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2017/02/15/launching-lintly/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/02/15/launching-lintly/</guid>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>Handling webhooks using Django and ngrok</title>
        <description>&lt;p&gt;In this article we’ll go over how to handle webhooks using Django, create a webhook in GitHub, and test the webhook on your local machine using ngrok. But first a brief primer on webhooks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re already familiar with webhooks then feel free to skip past this first part.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-are-webhooks&quot;&gt;What are webhooks?&lt;/h2&gt;

&lt;p&gt;Imagine you are writing an app that needs to be informed when an event occurs in another system. The event could be when a user sends a tweet or when the price of an item changes.&lt;/p&gt;

&lt;p&gt;One way to know when the event occurs is to check every so often. For instance, your app could make a request to Twitter every 5 minutes asking “Has &lt;em&gt;user&lt;/em&gt; posted anything yet?” This is called polling, and it can be taxing on your servers because you must constantly make requests to external services.&lt;/p&gt;

&lt;p&gt;Another way to know an event has occurred is to have the other service inform your app when things change. This can be accomplished using &lt;strong&gt;webhooks&lt;/strong&gt;. With webhooks you no longer need to poll every 5 minutes or once a day. Instead, your app &lt;strong&gt;receives events in real-time&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;handling-github-webhooks&quot;&gt;Handling GitHub webhooks&lt;/h2&gt;

&lt;p&gt;GitHub has a &lt;a href=&quot;https://developer.github.com/webhooks/#events&quot;&gt;plethora of events&lt;/a&gt; that can trigger webhooks. The event we’ll handle is the default push event, which occurs when a user pushes commits, branches, or tags to a GitHub repository.&lt;/p&gt;

&lt;p&gt;Let’s write some code that handles GitHub’s webhooks. We’re writing a Django app, so we’ll create a view function. Be sure to wire up this view to the URL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hooks/handle_github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is a view function that will handle GitHub webhooks &lt;a href=&quot;https://developer.github.com/webhooks/creating/&quot;&gt;based on the instructions in GitHub’s documentation&lt;/a&gt;. For this to work, you’ll need to first add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GITHUB_WEBHOOK_SECRET&lt;/code&gt; to your settings file. Think of this as your webhook’s password, so make it a long string with lots of random characters. Also, remember it, because we’ll need it later.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hmac&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;httplib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseForbidden&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.views.decorators.csrf&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csrf_exempt&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Simple webhook handler that prints the event and payload to the console&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Received the {} event&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csrf_exempt&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_github_hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Check the X-Hub-Signature header to make sure this is a valid request.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;github_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;HTTP_X_HUB_SIGNATURE&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GITHUB_WEBHOOK_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected_signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;sha1=&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare_digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseForbidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Invalid signature header&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Sometimes the payload comes in as the request body, sometimes it comes in
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# as a POST parameter. This will handle either case.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;payload&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;payload&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;META&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;HTTP_X_GITHUB_EVENT&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# This is where you&apos;ll do something with the webhook
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;handle_webhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;Webhook received&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACCEPTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Requests from GitHub come into our app through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_github_hook&lt;/code&gt; view function. The view ensures the request is authorized, loads the payload JSON, does something useful with the payload, and returns an HTTP response.&lt;/p&gt;

&lt;p&gt;When writing your handler, keep in mind that &lt;a href=&quot;https://developer.github.com/guides/best-practices-for-integrators/#favor-asynchronous-work-over-synchronous&quot;&gt;GitHub expects you to respond to webhooks within 30 seconds&lt;/a&gt;. If the task you need to perform can happen quickly then do it synchronously. Otherwise it’s probably best to put the task in the background using &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt; or &lt;a href=&quot;http://python-rq.org/&quot;&gt;RQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have code that handles webhooks, we need to test it.&lt;/p&gt;

&lt;h2 id=&quot;enter-ngrok&quot;&gt;Enter ngrok&lt;/h2&gt;

&lt;p&gt;Webhooks take some work to test locally. That’s because by their very nature they expect a publicly accessible URL to send requests to, and most of our development laptops don’t have that. Luckily there is a very easy way that we can create a public URL that leads right to our development server: &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ngrok is a command line application you can use to expose your development machine to the Internet. To install ngrok, go to &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok.io&lt;/a&gt; and follow their installation steps. It’s as simple as downloading and unzipping. I’ll wait while you go off and do that.&lt;/p&gt;

&lt;p&gt;🎵 Jeopardy theme song 🎵&lt;/p&gt;

&lt;p&gt;Is ngrok installed now? Great! To run it, open up your terminal and enter the following.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ngrok http 8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should start up a secure tunnel that is connected to your local HTTP port. It will look something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ngrok by [@inconshreveable](http://twitter.com/inconshreveable)                                                                                                                                         (Ctrl+C to quit)

Session Status                online
Version                       2.1.18
Region                        United States (us)
Web Interface                 [http://127.0.0.1:4041](http://127.0.0.1:4041)
Forwarding                    [http://dda5f8fd.ngrok.io](http://dda5f8fd.ngrok.io) -&amp;gt; localhost:8000
Forwarding                    [https://dda5f8fd.ngrok.io](https://dda5f8fd.ngrok.io) -&amp;gt; localhost:8000

Connections                   ttl     opn     rt1     rt5     p50     p90
                              0       0       0.00    0.00    0.00    0.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The forwarding URL &lt;a href=&quot;http://dda5f8fd.ngrok.io&quot;&gt;http://dda5f8fd.ngrok.io&lt;/a&gt; is what I’ll use for the webhook. Your URL will be different, so use whatever ngrok provides.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-our-webhook&quot;&gt;Setting up our webhook&lt;/h2&gt;

&lt;p&gt;Now that we have code to handle webhooks &lt;em&gt;and&lt;/em&gt; a publicly accessible URL, let’s set up a webhook in GitHub.&lt;/p&gt;

&lt;p&gt;You can add a webhook to a repository programmatically using GitHub’s API. In fact, that’s what you &lt;em&gt;should&lt;/em&gt; do to automate this whole process. In the spirit of brevity, however, we’ll add a webhook through the GitHub UI. To do that, go to one of your repositories in GitHub, select Settings, then Webhooks.&lt;/p&gt;

&lt;p&gt;Add your ngrok URL + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hooks/handle_github&lt;/code&gt; to the Payload URL field. Next, add the secret string from your Django settings to the Secret field. GitHub will send along this secret string so that you can verify the request is really coming from them. Finally, choose the events you would like GitHub to notify your app about. When it’s all said and done, the form should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4168/1*INZptfN1WBQuD2mSOhiDdg.png&quot; alt=&quot;Setting up our webhook in GitHub&quot; /&gt;&lt;em&gt;Setting up our webhook in GitHub&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Click the Add webhook button and your webhook is ready for action.&lt;/p&gt;

&lt;h2 id=&quot;testing-it-out&quot;&gt;Testing it out&lt;/h2&gt;

&lt;p&gt;It’s finally time to confirm this whole thing is working. To do that, start up the development Django server by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py runserver&lt;/code&gt;. This should start your server on port 8000, which is the port ngrok expects.&lt;/p&gt;

&lt;p&gt;Next we’ll need to trigger an event in GitHub. If you’re webhook is configured to handle the default push event then pushing a branch to GitHub will suffice.&lt;/p&gt;

&lt;p&gt;Clone the repository where you created your webhook. For example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/grantmcconnaughey/django-field-history.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, create a new branch and push it back to GitHub.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b webhook_test
$ touch new_file.py
$ git add new_file.py
$ git commit -m &quot;Testing webhooks&quot;
$ git push origin webhook_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will trigger the push event and GitHub will make a request to the ngrok URL you entered in your repo’s settings. This means you should see some activity over in the terminal where ngrok is running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP Requests
-------------

POST /hooks/handle_github/            202 Accepted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Huzzah! 🎉 We’ve successfully handled a GitHub webhook.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post I discussed &lt;strong&gt;what webhooks are&lt;/strong&gt; and why they’re useful. Next I showed you &lt;strong&gt;how to handle webhooks&lt;/strong&gt; in a Django app using a view function. Then I made a derivative joke involving a beloved American game show. After that I showed you how to &lt;strong&gt;configure your local development&lt;/strong&gt; machine to handle webhooks over the Internet. Finally, we proved that &lt;strong&gt;all of this actually works&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 15:10:00 -0600</pubDate>
        <link>http://localhost:4000/blog/2017/01/23/handling-webhooks-using-django-and-ngrok/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2017/01/23/handling-webhooks-using-django-and-ngrok/</guid>
        
        
        <category>django</category>
        
      </item>
    
  </channel>
</rss>
